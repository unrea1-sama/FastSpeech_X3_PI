# 模型参数组
model_parameters:
  # 原始Onnx浮点模型文件, !!需要根据自己的路径修改!!
  onnx_model: '../log/export/slim_transformer.onnx'

  # 转换的目标AI芯片架构
  march: 'bernoulli2'  # 'bayes'  # 'bernoulli2'

  # 模型转换输出的用于上板执行的模型文件的名称前缀
  output_model_file_prefix: 'slim_transformer'

  # 模型转换输出的结果的存放目录, !!需要根据自己的路径修改!!
  working_dir: '../log/export/converted'

  # 指定转换后混合异构模型是否保留输出各层的中间结果的能力
  layer_out_dump: False

  # 转换过程中日志生成级别
  log_level: 'debug'

# 输入信息参数组
input_parameters:
  # 原始浮点模型的输入节点名称
  input_name: 'x;x_length'

  # 原始浮点模型的输入数据格式（数量/顺序与input_name一致）
  input_type_train: 'featuremap;featuremap'

  # 原始浮点模型的输入数据排布（数量/顺序与input_name一致）
  input_layout_train: 'NCHW;NCHW'

  # 原始浮点模型的输入数据尺寸
  input_shape: '1x1x128x1;1x1x1x1'

  # 网络实际执行时，输入给网络的batch_size, 默认值为1
  # input_batch: 1

  # 在模型中添加的输入数据预处理方法
  norm_type: 'no_preprocess;no_preprocess'

  # 预处理方法的图像减去的均值; 如果是通道均值，value之间必须用空格分隔, !!图像专供，我们不需要!!
  # mean_value: '103.94 116.78 123.68'

  # 预处理方法的图像缩放比例，如果是通道缩放比例，value之间必须用空格分隔, !!图像专供，我们不需要!!
  # scale_value: '0.017'

  # 转换后混合异构模型需要适配的输入数据格式（数量/顺序与input_name一致）
  input_type_rt: 'featuremap;featuremap'

  # 输入数据格式的特殊制式
  input_space_and_range: 'regular;regular'

  # 转换后混合异构模型需要适配的输入数据排布（数量/顺序与input_name一致）
  input_layout_rt: 'NCHW;NCHW'  # 'NHWC;NHWC;NHWC;NHWC'

# 校准参数组
calibration_parameters:
  # 模型校准使用的标定样本的存放目录, !!需要根据自己的路径修改!!
  cal_data_dir: '../log/export/calibration/x;../log/export/calibration/x_length'

  # 开启图片校准样本自动处理（skimage read,resize到输入节点尺寸）
  preprocess_on: False

  # 校准使用的算法类型
  calibration_type: 'default'

  # max 校准方式的参数
  max_percentile: 1.0

  # 强制指定OP在CPU上运行
  #run_on_cpu:  'MatMul_593'

  # 强制指定OP在BPU上运行
  # run_on_bpu:  'Softmax_34;Softmax_88;Softmax_142;Softmax_196;Softmax_250;Softmax_304;Softmax_358;Softmax_412;Softmax_466;Softmax_520;Softmax_574;Softmax_628;'

# 编译参数组
compiler_parameters:
  # 编译策略选择
  compile_mode: 'latency'

  # 是否打开编译的debug信息
  debug: False

  # 模型运行核心数
  core_num: 1

  # 模型编译的优化等级选择
  optimize_level: 'O3'

# custom_op:  # 如果没有自定义op，直接注释掉
#   # 自定义op的校准方式, 推荐使用注册方式 register
#   custom_op_method: register
#
#   # 自定义OP的实现文件, 多个文件可用";"分隔, 该文件可由模板生成, 详情见自定义OP相关文档
#   op_register_files: sample_custom.py
#
#   # 自定义OP实现文件所在的文件夹, 请使用相对路径
#   custom_op_dir: ./custom_op
